name: release-please

on:
  push:
    branches:
      - main
  # Allow manual trigger for testing winget updates after a release exists
  workflow_dispatch:
    inputs:
      target_tag:
        description: "Manually specify the tag name (e.g., v1.7.0) to run post-release jobs (npm, winget) for testing/reruns. Leave empty on normal main push."
        required: false
        default: ""

permissions:
  contents: write
  pull-requests: write
  packages: write
  id-token: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: go

  # This job runs GoReleaser *only* if release-please created a tag/release OR if manually triggered with a tag
  goreleaser:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created || (github.event_name == 'workflow_dispatch' && github.event.inputs.target_tag != '') }}
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # GoReleaser needs the full history

      # Fetch the tag created by release-please if this wasn't a manual trigger
      # On manual trigger, assume the tag exists
      - name: Fetch Tag
        if: ${{ needs.release-please.outputs.release_created }}
        run: git fetch --tags origin ${{ needs.release-please.outputs.tag_name }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Set up UPX
        uses: crazy-max/ghaction-upx@v3
        with:
          install-only: true

      - name: Install Chocolatey
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

      # Determine the tag to use for GoReleaser
      - name: Determine Target Tag for GoReleaser
        id: determine_tag
        run: |
          TARGET_TAG=""
          if [[ "${{ needs.release-please.outputs.release_created }}" == "true" && -n "${{ needs.release-please.outputs.tag_name }}" ]]; then
            echo "Using tag from release-please: ${{ needs.release-please.outputs.tag_name }}"
            TARGET_TAG="${{ needs.release-please.outputs.tag_name }}"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.target_tag }}" ]]; then
            echo "Using tag from manual workflow dispatch: ${{ github.event.inputs.target_tag }}"
            TARGET_TAG="${{ github.event.inputs.target_tag }}"
          else
            echo "Error: Could not determine target tag for GoReleaser."
            exit 1
          fi
          echo "GORELEASER_TAG=${TARGET_TAG}" >> $GITHUB_OUTPUT

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          workdir: .
          args: release --clean --release-notes-from-tag ${{ steps.determine_tag.outputs.GORELEASER_TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
          WINGET_GITHUB_TOKEN: ${{ secrets.WINGET_GITHUB_TOKEN }}

      - name: Upload GoReleaser artifacts
        uses: actions/upload-artifact@v4
        with:
          name: goreleaser-artifacts-${{ steps.determine_tag.outputs.GORELEASER_TAG }}
          path: dist/

  publish-npm:
    needs: [release-please, goreleaser]
    if: ${{ needs.release-please.outputs.release_created || (github.event_name == 'workflow_dispatch' && github.event.inputs.target_tag != '') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Determine the tag to use
      - name: Get Target Tag Name
        id: get_target_tag
        run: |
          TARGET_TAG=""
          if [[ "${{ needs.release-please.outputs.release_created }}" == "true" && -n "${{ needs.release-please.outputs.tag_name }}" ]]; then
            echo "Using tag from release-please: ${{ needs.release-please.outputs.tag_name }}"
            TARGET_TAG="${{ needs.release-please.outputs.tag_name }}"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.target_tag }}" ]]; then
            echo "Using tag from manual workflow dispatch: ${{ github.event.inputs.target_tag }}"
            TARGET_TAG="${{ github.event.inputs.target_tag }}"
          else
            echo "Error: Could not determine target tag for npm publish."
            exit 1
          fi
          echo "TAG_NAME=${TARGET_TAG}" >> $GITHUB_OUTPUT
          echo "TAG_NAME_NO_V=${TARGET_TAG#v}" >> $GITHUB_OUTPUT

      - name: Download GoReleaser artifacts
        uses: actions/download-artifact@v4
        with:
          name: goreleaser-artifacts-${{ steps.get_target_tag.outputs.TAG_NAME }}
          path: dist/

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Update package.json version
        run: npm version --no-git-tag-version ${{ steps.get_target_tag.outputs.TAG_NAME_NO_V }}

      - name: Install Node.js dependencies for publish script
        run: npm install

      - name: Publish to npm using custom script
        run: node scripts/publish-npm.js
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: "true"
          RELEASE_TAG: ${{ steps.get_target_tag.outputs.TAG_NAME }}

  update-winget-pr:
    name: Update Winget PR Manifest
    needs: [release-please, goreleaser]
    if: ${{ needs.release-please.outputs.release_created || (github.event_name == 'workflow_dispatch' && github.event.inputs.target_tag != '') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Determine the tag to use
      - name: Get Target Tag Name
        id: get_target_tag
        run: |
          TARGET_TAG=""
          if [[ "${{ needs.release-please.outputs.release_created }}" == "true" && -n "${{ needs.release-please.outputs.tag_name }}" ]]; then
            echo "Using tag from release-please: ${{ needs.release-please.outputs.tag_name }}"
            TARGET_TAG="${{ needs.release-please.outputs.tag_name }}"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.target_tag }}" ]]; then
            echo "Using tag from manual workflow dispatch: ${{ github.event.inputs.target_tag }}"
            TARGET_TAG="${{ github.event.inputs.target_tag }}"
          else
            echo "Error: Could not determine target tag for Winget update."
            exit 1
          fi
          echo "TAG_NAME=${TARGET_TAG}" >> $GITHUB_OUTPUT
          echo "TAG_NAME_NO_V=${TARGET_TAG#v}" >> $GITHUB_OUTPUT

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: Checkout Main Repo for Templates
        uses: actions/checkout@v4
        with:
          path: main-repo

      # This step assumes GoReleaser (run in the 'goreleaser' job) has already pushed
      # the initial manifests and created the branch in the winget fork.
      - name: Wait for Winget Manifests from GoReleaser
        id: wait_for_manifests
        env:
          TARGET_TAG: ${{ steps.get_target_tag.outputs.TAG_NAME }}
          APP_VERSION_NO_V: ${{ steps.get_target_tag.outputs.TAG_NAME_NO_V }}
          WINGET_PUBLISHER: ShipDigital
          WINGET_PACKAGE: PullWatch
          WINGET_REPO_OWNER: ship-digital
          WINGET_REPO_NAME: winget-pkgs
        run: |
          #!/bin/bash
          set -eo pipefail
          retries=5
          delay=15
          branch_name="pull-watch-${TARGET_TAG}"
          manifest_path="manifests/s/${WINGET_PUBLISHER}/${WINGET_PACKAGE}/${APP_VERSION_NO_V}/${WINGET_PUBLISHER}.${WINGET_PACKAGE}.installer.yaml"
          repo_url="https://github.com/${WINGET_REPO_OWNER}/${WINGET_REPO_NAME}.git"

          echo "Attempting to clone winget repo ${repo_url}, branch ${branch_name}... (${retries} attempts, ${delay}s delay)"
          for (( i=1; i<=retries; i++ )); do
            if git clone --depth 1 --branch "$branch_name" --single-branch "$repo_url" winget-repo; then
              echo "Successfully cloned branch '$branch_name'."
              break
            fi
            if [[ $i -lt $retries ]]; then
              echo "WARN: Clone attempt $i/$retries failed. Branch '$branch_name' might not exist yet. Waiting ${delay} seconds..."
              sleep $delay
            else
              echo "ERROR: Could not clone branch '$branch_name' from '$repo_url' after $retries attempts. Did GoReleaser job succeed and push the branch?"
              exit 1
            fi
          done

          cd winget-repo
          echo "Checking for manifest file '$manifest_path'..."
          if [[ -f "$manifest_path" ]]; then
              echo "Manifest file found!"
              cd ..
              exit 0
          else
              echo "ERROR: Branch '$branch_name' cloned, but manifest file '$manifest_path' not found within it."
              echo "Listing contents of ${APP_VERSION_NO_V} directory:"
              ls -l "manifests/s/${WINGET_PUBLISHER}/${WINGET_PACKAGE}/${APP_VERSION_NO_V}/" || true
              cd ..
              exit 1
          fi

      - name: Generate Locale Files from Templates
        env:
          CURRENT_VERSION_NO_V: ${{ steps.get_target_tag.outputs.TAG_NAME_NO_V }}
          WINGET_PUBLISHER: ShipDigital
          WINGET_PACKAGE: PullWatch
        run: |
          #!/bin/bash
          set -eo pipefail
          echo "--- Generating locale files for ${CURRENT_VERSION_NO_V} from templates ---"
          locales=("de-DE" "es-ES" "fr-FR" "it-IT" "pt-BR" "pt-PT" "zh-CN")

          template_dir="main-repo/templates/winget/locales"
          target_base_dir="winget-repo/manifests/s/${WINGET_PUBLISHER}/${WINGET_PACKAGE}/${CURRENT_VERSION_NO_V}"
          source_manifest_version_file="${target_base_dir}/${WINGET_PUBLISHER}.${WINGET_PACKAGE}.installer.yaml"

          if [[ ! -d "$template_dir" ]]; then
            echo "ERROR: Template directory '$template_dir' not found."
            exit 1
          fi
          if [[ ! -f "$source_manifest_version_file" ]]; then
            echo "ERROR: Cannot read ManifestVersion. Source file '$source_manifest_version_file' not found (Wait step might have failed silently?)."
            exit 1
          fi

          TARGET_MANIFEST_VERSION=$(yq e '.ManifestVersion' "$source_manifest_version_file")
          if [[ -z "$TARGET_MANIFEST_VERSION" ]]; then
             echo "ERROR: Could not read ManifestVersion from '$source_manifest_version_file' using yq."
             exit 1
          fi
          echo "Target ManifestVersion read from installer: $TARGET_MANIFEST_VERSION"

          mkdir -p "${target_base_dir}"

          for locale in "${locales[@]}"; do
            source_file="${template_dir}/${WINGET_PUBLISHER}.${WINGET_PACKAGE}.locale.${locale}.yaml"
            target_file="${target_base_dir}/${WINGET_PUBLISHER}.${WINGET_PACKAGE}.locale.${locale}.yaml"

            if [[ -f "$source_file" ]]; then
              echo "Generating $target_file from template $source_file"
              cp "$source_file" "$target_file"
              schema_url="https://aka.ms/winget-manifest.locale.${TARGET_MANIFEST_VERSION}.schema.json"
              echo "Prepending schema header: $schema_url to $target_file"
              sed "1i\\# yaml-language-server: \$schema=${schema_url}" "$target_file" > tmp_locale && mv tmp_locale "$target_file"
              echo "Updating PackageVersion in $target_file to ${CURRENT_VERSION_NO_V}"
              yq e -i ".PackageVersion = \"${CURRENT_VERSION_NO_V}\"" "$target_file"
              echo "Updating ManifestVersion in $target_file to ${TARGET_MANIFEST_VERSION}"
              yq e -i ".ManifestVersion = \"${TARGET_MANIFEST_VERSION}\"" "$target_file"
            else
              echo "WARN: Source template file not found: $source_file"
            fi
          done
          echo "--- Locale file generation complete ---"

      - name: Enrich Winget Manifest (Installer)
        env:
          APP_VERSION_NO_V: ${{ steps.get_target_tag.outputs.TAG_NAME_NO_V }}
          WINGET_PUBLISHER: ShipDigital
          WINGET_PACKAGE: PullWatch
          WINGET_MIN_OS: "10.0.0.0"
          WINGET_INSTALL_MODES_YAML: "['silent', 'silentWithProgress']"
          WINGET_UPGRADE_BEHAVIOR: "install"
          WINGET_COMMANDS_YAML: "['pull-watch']"
        run: |
          #!/bin/bash
          set -eo pipefail

          manifest_version="${APP_VERSION_NO_V}"
          manifest_dir="winget-repo/manifests/s/${WINGET_PUBLISHER}/${WINGET_PACKAGE}/${manifest_version}"
          manifest_file="${manifest_dir}/${WINGET_PUBLISHER}.${WINGET_PACKAGE}.installer.yaml"

          echo "--- Enriching Winget Installer Manifest ${manifest_file} for ${APP_VERSION_NO_V} ---"

          if [[ ! -f "$manifest_file" ]]; then
            echo "ERROR: Winget installer manifest not found at '$manifest_file'."
            echo "Listing contents of winget-repo/manifests/s/${WINGET_PUBLISHER}/${WINGET_PACKAGE}/${manifest_version}/:"
            ls -l "$manifest_dir" || echo "(Directory not found or empty)"
            exit 1
          fi

          echo "Found installer manifest: $manifest_file"
          yq e -i ".MinimumOSVersion = strenv(WINGET_MIN_OS)" "$manifest_file"
          yq e -i ".InstallModes = load(strenv(WINGET_INSTALL_MODES_YAML))" "$manifest_file"
          yq e -i ".UpgradeBehavior = strenv(WINGET_UPGRADE_BEHAVIOR)" "$manifest_file"
          yq e -i ".Commands = load(strenv(WINGET_COMMANDS_YAML))" "$manifest_file"

          echo "Installer manifest successfully enriched."
          echo "--- Updated Installer Manifest Content ---"
          cat "$manifest_file"
          echo "------------------------------"

      - name: Commit and Push Changes to Winget Fork
        env:
          TAG_NAME: ${{ steps.get_target_tag.outputs.TAG_NAME }}
          APP_VERSION_NO_V: ${{ steps.get_target_tag.outputs.TAG_NAME_NO_V }}
          WINGET_PUBLISHER: ShipDigital
          WINGET_PACKAGE: PullWatch
          WINGET_REPO_OWNER: ship-digital
          WINGET_REPO_NAME: winget-pkgs
          COMMIT_AUTHOR_NAME: "github-actions[bot]"
          COMMIT_AUTHOR_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
          SIGNOFF_LINE: "Signed-off-by: Alessandro De Blasis <alex@deblasis.net>"
        run: |
          #!/bin/bash
          set -eo pipefail
          cd winget-repo

          git config --global user.name "${COMMIT_AUTHOR_NAME}"
          git config --global user.email "${COMMIT_AUTHOR_EMAIL}"

          readonly manifest_version_dir="manifests/s/${WINGET_PUBLISHER}/${WINGET_PACKAGE}/${APP_VERSION_NO_V}"

          if [[ ! -d "$manifest_version_dir" ]]; then
            echo "ERROR: Manifest directory '$manifest_version_dir' not found. Nothing to commit."
            cd .. && exit 1
          fi

          git add "$manifest_version_dir/"

          # Check if there are staged changes in the target directory
          if git diff --quiet --exit-code --cached -- "$manifest_version_dir/"; then
             echo "No changes detected in Winget manifests within '$manifest_version_dir' after enrichment/locale generation. Nothing to commit."
             cd .. && exit 0
          fi

          echo "Committing changes to Winget manifests in '$manifest_version_dir'..."
          COMMIT_MSG="ci(winget): update manifests for ${TAG_NAME}"
          git commit -m "$COMMIT_MSG" -m "$SIGNOFF_LINE"

          BRANCH_NAME="pull-watch-${TAG_NAME}"
          echo "Pushing manifest updates commit to branch ${BRANCH_NAME} in ${WINGET_REPO_OWNER}/${WINGET_REPO_NAME}..."
          git push origin HEAD:"${BRANCH_NAME}" --force-with-lease

          echo "Successfully pushed changes to winget fork branch ${BRANCH_NAME}."
          cd ..
