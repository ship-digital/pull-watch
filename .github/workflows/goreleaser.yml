name: goreleaser

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      target_tag:
        description: "Tag name (e.g., v1.7.0) of the winget branch to target for enrichment"
        required: false
        default: ""

permissions:
  contents: write
  packages: write
  id-token: write
  pull-requests: write

jobs:
  goreleaser:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Set up UPX
        uses: crazy-max/ghaction-upx@v3
        with:
          install-only: true

      - name: Install Chocolatey
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
          WINGET_GITHUB_TOKEN: ${{ secrets.WINGET_GITHUB_TOKEN }}

      - name: Upload GoReleaser artifacts
        uses: actions/upload-artifact@v4
        with:
          name: goreleaser-artifacts
          path: dist/

  publish-npm:
    needs: goreleaser
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') # Run only for tags
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download GoReleaser artifacts
        uses: actions/download-artifact@v4
        with:
          name: goreleaser-artifacts
          path: dist/

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Install Node.js dependencies for publish script
        run: npm install

      - name: Publish to npm using custom script
        run: node scripts/publish-npm.js
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: "true"
          GITHUB_REF: ${{ github.ref }}

  update-winget-pr:
    name: Update Winget PR Manifest
    needs: goreleaser
    runs-on: ubuntu-latest
    if: success() && startsWith(github.ref, 'refs/tags/') # Run only on tag success
    steps:
      - name: Get Target Tag Name
        id: get_target_tag
        run: |
          TARGET_TAG=""
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.target_tag }}" ]]; then
            echo "Using workflow input target_tag: ${{ github.event.inputs.target_tag }}"
            TARGET_TAG="${{ github.event.inputs.target_tag }}"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "Using tag from GITHUB_REF: ${{ github.ref_name }}"
            TARGET_TAG="${{ github.ref_name }}"
          else
            echo "Error: Cannot determine target tag. Not a tag push and target_tag input not provided."
            exit 1
          fi
          echo "TAG_NAME=${TARGET_TAG}" >> $GITHUB_OUTPUT
          echo "TAG_NAME_NO_V=${TARGET_TAG#v}" >> $GITHUB_OUTPUT

      # Install yq globally for subsequent steps
      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          yq --version # Verify installation

      # Checkout the main repo to get templates
      - name: Checkout Main Repo for Templates
        uses: actions/checkout@v4
        with:
          path: main-repo

      # Wait for GoReleaser to push the initial manifests to the winget fork branch
      - name: Wait for Winget Manifests from GoReleaser
        id: wait_for_manifests
        env:
          TARGET_TAG: ${{ steps.get_target_tag.outputs.TAG_NAME }}
          WINGET_PUBLISHER: ShipDigital
          WINGET_PACKAGE: PullWatch
          APP_VERSION_NO_V: ${{ steps.get_target_tag.outputs.TAG_NAME_NO_V }}
          WINGET_REPO_OWNER: ship-digital
          WINGET_REPO_NAME: winget-pkgs
        run: |
          #!/bin/bash
          set -eo pipefail
          retries=3
          delay=10
          branch_name="pull-watch-${TARGET_TAG}"
          manifest_path="manifests/s/${WINGET_PUBLISHER}/${WINGET_PACKAGE}/${APP_VERSION_NO_V}/${WINGET_PUBLISHER}.${WINGET_PACKAGE}.installer.yaml"
          repo_url="https://github.com/${WINGET_REPO_OWNER}/${WINGET_REPO_NAME}.git"

          echo "Cloning winget repo ${repo_url} to winget-repo..."
          git clone --branch "$branch_name" --single-branch "$repo_url" winget-repo || {
            echo "ERROR: Could not clone branch '$branch_name' from '$repo_url'. Did GoReleaser create it?"
            exit 1
          }
          cd winget-repo

          for (( i=1; i<=retries; i++ )); do
            echo "Attempt $i/$retries: Checking for manifest file '$manifest_path' in branch '$branch_name'..."
            # Pull latest changes in case GoReleaser just pushed
            git pull origin "$branch_name" --ff-only || echo "Pull failed or nothing to pull, continuing check..."

            if [[ -f "$manifest_path" ]]; then
              echo "Manifest file found!"
              # Go back to workspace root before finishing step
              cd ..
              exit 0
            fi
            if [[ $i -lt $retries ]]; then
              echo "Manifest not found yet. Waiting ${delay} seconds..."
              sleep $delay
            fi
          done

          echo "ERROR: Manifest file '$manifest_path' not found in branch '$branch_name' after $retries attempts."
          # Go back to workspace root before exiting
          cd ..
          exit 1
        # No need for a separate checkout step for winget-repo, this step does it.

      - name: Generate Locale Files from Templates
        env:
          CURRENT_VERSION_NO_V: ${{ steps.get_target_tag.outputs.TAG_NAME_NO_V }}
          WINGET_PUBLISHER: ShipDigital
          WINGET_PACKAGE: PullWatch
        run: |
          #!/bin/bash
          set -eo pipefail
          echo "--- Generating locale files for ${CURRENT_VERSION_NO_V} from templates ---"
          locales=("de-DE" "es-ES" "fr-FR" "it-IT" "pt-BR" "pt-PT" "zh-CN") # Locales to generate

          # Source directory within the main-repo checkout
          template_dir="main-repo/templates/winget/locales"

          # Target directory within the winget-pkgs repo checkout
          target_base_dir="winget-repo/manifests/s/${WINGET_PUBLISHER}/${WINGET_PACKAGE}/${CURRENT_VERSION_NO_V}"

          # File generated by GoReleaser to read the current ManifestVersion from
          # Using installer.yaml as it's definitely created by GoReleaser and checked in previous step
          source_manifest_version_file="${target_base_dir}/${WINGET_PUBLISHER}.${WINGET_PACKAGE}.installer.yaml"

          # Ensure the main pull-watch repo templates directory exists
          if [[ ! -d "$template_dir" ]]; then
            echo "ERROR: Template directory '$template_dir' not found."
            exit 1
          fi

          # Read the ManifestVersion from the GoReleaser-generated installer file
          if [[ ! -f "$source_manifest_version_file" ]]; then
            # This should not happen if the wait step succeeded, but check anyway
            echo "ERROR: Cannot read ManifestVersion. Source file '$source_manifest_version_file' not found."
            exit 1
          fi
          # Using the installed yq
          TARGET_MANIFEST_VERSION=$(yq e '.ManifestVersion' "$source_manifest_version_file")
          if [[ -z "$TARGET_MANIFEST_VERSION" ]]; then
             echo "ERROR: Could not read ManifestVersion from '$source_manifest_version_file' using yq."
             exit 1
          fi
          echo "Target ManifestVersion read from installer: $TARGET_MANIFEST_VERSION"

          # Target directory should already exist from GoReleaser push, but ensure just in case
          mkdir -p "${target_base_dir}"

          for locale in "${locales[@]}"; do
            source_file="${template_dir}/${WINGET_PUBLISHER}.${WINGET_PACKAGE}.locale.${locale}.yaml"
            target_file="${target_base_dir}/${WINGET_PUBLISHER}.${WINGET_PACKAGE}.locale.${locale}.yaml"

            if [[ -f "$source_file" ]]; then
              echo "Generating $target_file from template $source_file"
              cp "$source_file" "$target_file"

              # Prepend the schema header
              schema_url="https://aka.ms/winget-manifest.locale.${TARGET_MANIFEST_VERSION}.schema.json"
              echo "Prepending schema header: $schema_url to $target_file"
              # Use sed to insert the header at the beginning of the file. Escape special chars if needed.
              # Using a temp file for robustness with sed -i across different environments
              sed "1i\\# yaml-language-server: \$schema=${schema_url}" "$target_file" > tmp_locale && mv tmp_locale "$target_file"

              # Update versions using installed yq
              echo "Updating PackageVersion in $target_file to ${CURRENT_VERSION_NO_V}"
              yq -i ".PackageVersion = \"${CURRENT_VERSION_NO_V}\"" "$target_file"
              echo "Updating ManifestVersion in $target_file to ${TARGET_MANIFEST_VERSION}"
              yq -i ".ManifestVersion = \"${TARGET_MANIFEST_VERSION}\"" "$target_file"
            else
              echo "WARN: Source template file not found: $source_file"
            fi
          done
          echo "--- Locale file generation complete ---"

      - name: Enrich Winget Manifest (Installer)
        env:
          APP_VERSION_NO_V: ${{ steps.get_target_tag.outputs.TAG_NAME_NO_V }}
          WINGET_PUBLISHER: ShipDigital
          WINGET_PACKAGE: PullWatch
          WINGET_MIN_OS: "10.0.0.0"
          WINGET_INSTALL_MODES_YAML: "['silent', 'silentWithProgress']"
          WINGET_UPGRADE_BEHAVIOR: "install"
          WINGET_COMMANDS_YAML: "['pull-watch']"
        run: |
          manifest_version="${APP_VERSION_NO_V}" && \
          manifest_dir="winget-repo/manifests/s/${WINGET_PUBLISHER}/${WINGET_PACKAGE}/${manifest_version}" && \
          manifest_file="${manifest_dir}/${WINGET_PUBLISHER}.${WINGET_PACKAGE}.installer.yaml" && \
          echo "--- Enriching Winget Installer Manifest ${manifest_file} for ${APP_VERSION_NO_V} ---" && \
          if [[ ! -f "$manifest_file" ]]; then \
            echo "ERROR: Winget installer manifest not found at '$manifest_file'." && \
            find winget-repo/manifests -type f -name '*.installer.yaml' -path "*/${manifest_version}/*" -print || true && \
            exit 1; \
          fi && \
          echo "Found installer manifest: $manifest_file" && \
          yq -i ".MinimumOSVersion = env(WINGET_MIN_OS)" "$manifest_file" && \
          yq -i ".InstallModes = env(WINGET_INSTALL_MODES_YAML)" "$manifest_file" && \
          yq -i ".UpgradeBehavior = env(WINGET_UPGRADE_BEHAVIOR)" "$manifest_file" && \
          yq -i ".Commands = env(WINGET_COMMANDS_YAML)" "$manifest_file" && \
          echo "Installer manifest successfully enriched." && \
          echo "--- Updated Installer Manifest Content ---" && \
          cat "$manifest_file" && \
          echo "------------------------------"

      - name: Commit and Push Changes
        env:
          TAG_NAME: ${{ steps.get_target_tag.outputs.TAG_NAME }}
          APP_VERSION_NO_V: ${{ steps.get_target_tag.outputs.TAG_NAME_NO_V }}
          WINGET_PUBLISHER: ShipDigital
          WINGET_PACKAGE: PullWatch
          COMMIT_AUTHOR_NAME: "Alessandro De Blasis" # Required for --signoff
          COMMIT_AUTHOR_EMAIL: "alex@deblasis.net" # Required for --signoff
        run: |
          # Change directory into the winget repo checkout
          cd winget-repo

          # Configure git user for this commit
          git config --global user.name '${{ env.COMMIT_AUTHOR_NAME }}'
          git config --global user.email '${{ env.COMMIT_AUTHOR_EMAIL }}'

          # Construct the path relative to the winget-repo root
          readonly manifest_version_dir="manifests/s/${WINGET_PUBLISHER}/${WINGET_PACKAGE}/${APP_VERSION_NO_V}"

          # Check if the directory exists (should exist due to wait step)
          if [[ ! -d "$manifest_version_dir" ]]; then
            echo "ERROR: Manifest directory '$manifest_version_dir' not found. Nothing to commit."
            cd .. && exit 1 # Go back before exiting
          fi

          # Add the entire directory for the new version (includes generated locales)
          git add "$manifest_version_dir/"

          # Check if git status shows changes relative to HEAD within the added directory
          # (This will likely always show changes now due to locale generation/enrichment)
          if git diff --quiet --exit-code --cached -- "$manifest_version_dir/"; then
             echo "No changes detected in Winget manifests within '$manifest_version_dir'. Nothing to commit."
             cd .. && exit 0 # Go back before exiting
          fi

          echo "Committing changes to Winget manifests in '$manifest_version_dir'..."
          # Use a distinct commit message
          COMMIT_MSG="ci(winget): update manifests for ${TAG_NAME}"
          # Use --signoff, git commit will add the configured user/email from config
          git commit -m "$COMMIT_MSG" --signoff

          # Branch name from goreleaser.yaml winget config
          BRANCH_NAME="pull-watch-${TAG_NAME}"
          echo "Pushing manifest updates commit to branch ${BRANCH_NAME} in ${WINGET_REPO_OWNER}/${WINGET_REPO_NAME}..."
          # Push to the branch in the fork (origin points to winget-repo here)
          # Use --force-with-lease if GoReleaser might have pushed *after* the initial clone but before this commit
          git push origin HEAD:"${BRANCH_NAME}" --force-with-lease

          # Go back to the original workspace root directory
          cd ..
